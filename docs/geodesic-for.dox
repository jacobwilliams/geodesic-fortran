// -*- text -*-
/**
 * \file geodesic-for.dox
 * \brief Documentation for geodesic routines implemented in Fortran
 *
 * Written by Charles Karney <charles@karney.com> and licensed under the
 * MIT/X11 License.  For more information, see
 * https://geographiclib.sourceforge.io/
 **********************************************************************/

/**
\mainpage Geodesic routines implemented in Fortran
\author Charles F. F. Karney (charles@karney.com)
\version 2.0
\date 2022-04-21

\section abstract-for Abstract

This is a Fortran implementation of the geodesic algorithms from <a
href="../../index.html">geodesic_module</a>.  This is a
self-contained library which makes it easy to do geodesic computations
for an ellipsoid of revolution in a Fortran program.  It is written in
Fortran 77 (avoiding features which are now deprecated) and should
compile correctly with just about any Fortran compiler.

This an implementation in Fortran of the geodesic algorithms described in
- C. F. F. Karney,
  <a href="https://doi.org/10.1007/s00190-012-0578-z">
  Algorithms for geodesics</a>,
  J. Geodesy <b>87</b>, 43--55 (2013);
  <a href="../../geod-addenda.html">
  addenda</a>.
.
Other links
- Library documentation (all versions):
  <a href="../">https://geographiclib.sourceforge.io/Fortran</a>
- GIT repository: https://github.com/geodesic_module/geodesic_module-fortran
  Releases are tagged in git as, e.g., v1.52, v2.0, etc.
- Source distribution:
  https://sourceforge.net/projects/geodesic_module/files/distrib-Fortran
- geodesic_module:
  <a href="../../index.html">https://geographiclib.sourceforge.io</a>
- The library has been implemented in a few other <a
  href="../../doc/library.html#languages">languages</a>.

\section contents Contents
 - \ref intro
 - \ref standalone
 - \ref library
 - \ref changes

\page intro Introduction to the geodesic problem

The shortest path between two points on the ellipsoid at (\e lat1, \e
lon1) and (\e lat2, \e lon2) is called the geodesic.  Its length is
\e s12 and the geodesic from point 1 to point 2 has forward azimuths
\e azi1 and \e azi2 at the two end points.

Traditionally two geodesic problems are considered:
- the direct problem -- given \e lat1, \e lon1, \e s12, and \e azi1,
  determine \e lat2, \e lon2, and \e azi2.  This is solved by the function
  geod_direct().
- the inverse problem -- given \e lat1, \e lon1, and \e lat2, \e lon2,
  determine \e s12, \e azi1, and \e azi2.  This is solved by the function
  geod_inverse().

The ellipsoid is specified by its equatorial radius \e a (typically in
meters) and flattening \e f.  The routines are accurate to round off with
real(wp) arithmetic provided that |<i>f</i>| &lt; 1/50; for the
WGS84 ellipsoid, the errors are less than 15 nanometers.  (Reasonably
accurate results are obtained for |<i>f</i>| &lt; 1/5.)  For a prolate
ellipsoid, specify \e f &lt; 0.

The routines also calculate several other quantities of interest
- \e S12 is the area between the geodesic from point 1 to point 2 and the
  equator; i.e., it is the area, measured counter-clockwise, of the
  quadrilateral with corners (\e lat1,\e lon1), (0,\e lon1), (0,\e lon2),
  and (\e lat2,\e lon2).
- \e m12, the reduced length of the geodesic is defined such that if
  the initial azimuth is perturbed by \e dazi1 (radians) then the
  second point is displaced by \e m12 \e dazi1 in the direction
  perpendicular to the geodesic.  On a curved surface the reduced
  length obeys a symmetry relation, \e m12 + \e m21 = 0.  On a flat
  surface, we have \e m12 = \e s12.
- \e M12 and \e M21 are geodesic scales.  If two geodesics are
  parallel at point 1 and separated by a small distance \e dt, then
  they are separated by a distance \e M12 \e dt at point 2.  \e M21
  is defined similarly (with the geodesics being parallel to one
  another at point 2).  On a flat surface, we have \e M12 = \e M21
  = 1.
- \e a12 is the arc length on the auxiliary sphere.  This is a
  construct for converting the problem to one in spherical
  trigonometry.  \e a12 is measured in degrees.  The spherical arc
  length from one equator crossing to the next is always 180&deg;.

If points 1, 2, and 3 lie on a single geodesic, then the following
addition rules hold:
- \e s13 = \e s12 + \e s23
- \e a13 = \e a12 + \e a23
- \e S13 = \e S12 + \e S23
- \e m13 = \e m12 \e M23 + \e m23 \e M21
- \e M13 = \e M12 \e M23 &minus; (1 &minus; \e M12 \e M21) \e
  m23 / \e m12
- \e M31 = \e M32 \e M21 &minus; (1 &minus; \e M23 \e M32) \e
  m12 / \e m23

The shortest distance returned by the solution of the inverse problem is
(obviously) uniquely defined.  However, in a few special cases there are
multiple azimuths which yield the same shortest distance.  Here is a
catalog of those cases:
- \e lat1 = &minus;\e lat2 (with neither point at a pole).  If \e azi1 = \e
  azi2, the geodesic is unique.  Otherwise there are two geodesics and the
  second one is obtained by setting [\e azi1, \e azi2] &rarr; [\e azi2, \e
  azi1], [\e M12, \e M21] &rarr; [\e M21, \e M12], \e S12 &rarr; &minus;\e
  S12.  (This occurs when the longitude difference is near &plusmn;180&deg;
  for oblate ellipsoids.)
- \e lon2 = \e lon1 &plusmn; 180&deg; (with neither point at a pole).  If \e
  azi1 = 0&deg; or &plusmn;180&deg;, the geodesic is unique.  Otherwise
  there are two geodesics and the second one is obtained by setting [\e
  azi1, \e azi2] &rarr; [&minus;\e azi1, &minus;\e azi2], \e S12 &rarr;
  &minus;\e S12.  (This occurs when \e lat2 is near &minus;\e lat1 for
  prolate ellipsoids.)
- Points 1 and 2 at opposite poles.  There are infinitely many geodesics
  which can be generated by setting [\e azi1, \e azi2] &rarr; [\e azi1, \e
  azi2] + [\e d, &minus;\e d], for arbitrary \e d.  (For spheres, this
  prescription applies when points 1 and 2 are antipodal.)
- \e s12 = 0 (coincident points).  There are infinitely many geodesics which
  can be generated by setting [\e azi1, \e azi2] &rarr; [\e azi1, \e azi2] +
  [\e d, \e d], for arbitrary \e d.

The area of a geodesic polygon can be determined by summing &minus;\e
S12 for successive edges of the polygon (\e S12 is negated so that
clockwise traversal of a polygon gives a positive area).  However, if
the polygon encircles a pole, the sum must be adjusted by
&plusmn;<i>A</i>/2, where \e A is the area of the full ellipsoid, with
the sign chosen to place the result in (&minus;<i>A</i>/2, <i>A</i>/2].

The principal advantages of these algorithms over previous ones (e.g.,
Vincenty, 1975) are
- accurate to round off for |<i>f</i>| &lt; 1/50;
- the solution of the inverse problem is always found;
- differential and integral properties of geodesics are computed.

\page standalone Use as a standalone library

Download the source code from as a tarball from

- https://sourceforge.net/projects/geodesic_module/files/distrib-Fortran

or check out the source code from

- https://github.com/geodesic_module/geodesic_module-fortran

Build the code with <a href="https://www.cmake.org">cmake</a>
\verbatim
cmake -B BUILD -S .
cd BUILD
make
make test
\endverbatim
possibly including some options via <code>-D</code>:
- <code>CONVERT_WARNINGS_TO_ERRORS</code> warnings are fatal (default ON)
- <code>BUILD_DOCUMENTATION</code> look for doxgen and build
  documentation (default ON)
- <code>BUILD_SHARED_LIBS</code> make a shared (instead of static)
  library (default ON)

CMake code to *install* the library is not provided.

The library consists of the file geodesic.for

Licensed under the
<a href="https://www.opensource.org/licenses/MIT">MIT/X11 License</a>; see
<a href="../../LICENSE.txt">LICENSE.txt</a>.

Also included are 3 small test programs:
 - geoddirect.for is a simple command line utility for solving the
   direct geodesic problem;
 - geodinverse.for is a simple command line utility for solving the
   inverse geodesic problem;
 - planimeter.for is a simple command line utility for computing the
   area of a geodesic polygon given its vertices.
 .
Here, for example, is geodinverse.for
\include geodinverse.for
Use geodinverse, for example, with
\verbatim
echo -30 0 29.5 179.5 | ./tools/geodinverse \endverbatim

Finally, the two programs
 - ngsforward
 - ngsinverse
 .
which are also built with cmake, provide drop-in replacements for
replacements for the NGS tools FORWARD and INVERSE available from
https://www.ngs.noaa.gov/TOOLS/Inv_Fwd/Inv_Fwd.html.

These cure two problems of the Vincenty algorithms used by NGS:
 - the accuracy is "only" 0.1 mm;
 - the inverse program sometimes goes into an infinite loop.
 .
The corresponding source files
 - ngsforward.for
 - ngsinverse.for
 - ngscommon.for
 .
are derived from the NGS source files
 - forward.for, version 2.0, dated 2002-08-21
 - inverse.for, version 3.0, dated 2012-11-04
 .
and are therefore in the public domain.

\page library Library documentation

- Optionally put @code{.for}
  include "geodesic.inc"
  @endcode
  in declaration section of your subroutines.
- make calls to the geodesic routines from your code.  The interface to
  the library is documented in geodesic.for.
- Compile and link as described above.

The documention of the library is given in the file, geodesic.for.

Here is a brief summary of the functions.
- Call direct() to solve the direct geodesic problme.
- Call inverse() to solve the inverse geodesic problem.
- Call area() to find the area of a geodesic polygon.
- geover() returns the version numbers of the library.

\page changes Change log

 - <a href="../2.0/index.html">Version 2.0</a>
   (released 2022-04-21)
   - This is a major reorganization with the Fortran library put into
     its own git repository,
     https://github.com/geodesic_module/geodesic_module-fortran.  Despite
     this, there are only reasonably minor changes to the library
     itself.
   - Fix bug where the solution of the inverse geodesic problem with
     &phi;<sub>1</sub> = 0 and &phi;<sub>2</sub> = nan was treated as
     equatorial.
   - More careful treatment of &plusmn;0&deg; and &plusmn;180&deg;.
     - These behave consistently with taking the limits
       - &plusmn;0 means &plusmn;&epsilon; as &epsilon; &rarr; 0+
       - &plusmn;180 means &plusmn;(180 &minus; &epsilon;) as &epsilon;
         &rarr; 0+
     - As a consequence, azimuths of +0&deg; and +180&deg; are reckoned
       to be east-going, as far as tracking the longitude with the
       *unroll* flag set and the area goes, while azimuths &minus;0&deg;
       and &minus;180&deg; are reckoned to be west-going.
     - When computing longitude differences, if &lambda;<sub>2</sub>
       &minus; &lambda;<sub>1</sub> = &plusmn;180&deg; (mod 360&deg;),
       then the sign is picked depending on the sign of the difference.
     - A separate test suite geodsigntest has been added to check this
       treatment.

 - <a href="../1.52/index.html">Version 1.52</a>
   (released 2021-06-22)
   - Be more aggressive in preventing negative s12 and m12 for short lines.

 - <a href="../1.50/index.html">Version 1.50</a>
   (released 2019-09-24)
   - Allow arbitrarily complex polygons in area.  In the case of
     self-intersecting polygons the area is accumulated "algebraically",
     e.g., the areas of the 2 loops in a figure-8 polygon will partially
     cancel.

 - <a href="../1.49/index.html">Version 1.49</a>
   (released 2017-10-05)
   - Fix code formatting and add two tests.

 - <a href="../1.48/index.html">Version 1.48</a>
   (released 2017-04-09)
   - Change default range for longitude and azimuth to
     (&minus;180&deg;, 180&deg;] (instead of
     [&minus;180&deg;, 180&deg;)).

 - <a href="../1.47/index.html">Version 1.47</a>
   (released 2017-02-15)
   - Improve accuracy of area calculation (fixing a flaw introduced in
     version 1.46).

 - <a href="../1.46/index.html">Version 1.46</a>
   (released 2016-02-15)
   - More accurate inverse solution when longitude difference is close
     to 180&deg;.

 - <a href="../1.45/index.html">Version 1.45</a>
   (released 2015-09-30)
   - The solution of the inverse problem now correctly returns NaNs if
     one of the latitudes is a NaN.
   - Include a test suite that can be run with "make test" after
     configuring with cmake.
   - The library now treats latitudes outside the range [&minus;90&deg;,
     90&deg;] as NaNs; so the sample programs no longer check for legal
     values of latitude.

 - <a href="../1.44/index.html">Version 1.44</a>
   (released 2015-08-14)
   - Improve accuracy of calculations by evaluating trigonometric
     functions more carefully and replacing the series for the reduced
     length with one with a smaller truncation error.
   - The allowed ranges for longitudes and azimuths is now unlimited;
     it used to be [&minus;540&deg;, 540&deg;).
   - The sample programs, geoddirect and geodinverse, enforce the
     restriction of latitude to [&minus;90&deg;, 90&deg;].
   - The inverse calculation sets \e s12 to zero for coincident points
     at pole (instead of returning a tiny quantity).
**********************************************************************/
